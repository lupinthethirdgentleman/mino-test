import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { useWeb3React } from '@web3-react/core'
import { InjectedConnector } from '@web3-react/injected-connector'
import { Alchemy, Network } from "alchemy-sdk"
import Swal from 'sweetalert2';
import { initializeApp } from "firebase/app";
import { getFirestore, doc, setDoc } from "firebase/firestore";
import styles from '@/styles/Home.module.css'
import { useAuthContext } from '@/context/useAuth'

const inter = Inter({ subsets: ['latin'] })

const config = {
  apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,
  network: Network.ETH_MAINNET,
}

const firebaseConfig = {
  apiKey: "AIzaSyB56fwe9HiMYMrfN0qbPA2epADz1XeJVgo",
  authDomain: "mino-game-test.firebaseapp.com",
  projectId: "mino-game-test",
  storageBucket: "mino-game-test.appspot.com",
  messagingSenderId: "262701149790",
  appId: "1:262701149790:web:577d7eef0391278a0d4ecf",
  measurementId: "G-SQ29N475KR"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// const config = {
//   apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY_,
//   network: Network.ETH_GOERLI,
// }

const pinataLink = "https://gateway.pinata.cloud/ipfs/"

export default function Home() {
  const injectedConnector = new InjectedConnector({
    supportedChainIds: [1, 5],
  })

  const { activate, account, library, active } = useWeb3React()
  const { login, logout } = useAuthContext()

  const [nfts, setNfts] = useState<any>([])
  const [nftCount, setNftCount] = useState<number>(0)
  const [isLoading, setIsLoading] = useState<boolean>(false)

  const connectWallet = async () => {
    try {
      await activate(injectedConnector)
      login()
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Successfully logged in!'
      });
    } catch(err) {
      console.log(err)
    }
  }

  // const disconnectWallet = () => {
  //   logout()
  // }

  const getNftInfo = async () => {
    setIsLoading(true)
    const alchemy = new Alchemy(config)
    if (account) {
      const nfts = await alchemy.nft.getNftsForOwner(account)
      setNfts(nfts.ownedNfts)
      setNftCount(nfts.totalCount)
      setIsLoading(false)
    } else {
      setIsLoading(false)
    }
  }

  const callFirestore = async (index: number, nft: any) => {
    await setDoc(doc(db, account ? account : "", `${index}`), {
      title: nft.title,
      avatar: nft.media[0] ? nft.media[0]?.raw : "",
      balance: nft.balance,
      type: nft.tokenType,
      address: nft.contract.address
    });
  }

  const saveToDatabase = () => {
    setIsLoading(true)
    nfts.map((nft: any, index: number) => {
      callFirestore(index, nft)
    })
    
    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: 'Successfully saved to Firestore!'
    });
    setIsLoading(false)
  }

  useEffect(() => {
    getNftInfo()
  }, [account])

  return (
    <>
      <Head>
        <title>minogame test</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.connectWallet}>
          {account
            ? <div>{account.slice(0, 6) + '...' + account.slice(-4)}</div>
            : <button onClick={connectWallet}>Connect Wallet</button>
          }
        </div>
        {isLoading
          ? <div>Loading</div>
          : nftCount
            ? (
              <div className={styles.content}>
                <div className={styles.nftRow}>
                  <div className={styles.no}>No</div>
                  <div className={styles.avatar}>Avatar</div>
                  <div className={styles.title}>Title</div>
                  <div className={styles.balance}>Balance</div>
                  <div className={styles.type}>Type</div>
                </div>
                {nfts.map((nft: any, index: number) => (
                  <div key={index} className={styles.nftRow}>
                    <div className={styles.no}>{index+1}</div>
                    <div className={styles.avatar}>
                      {(nft.media[0]?.format === "jpeg" || nft.media[0]?.format==="png")
                        ? <img
                            src={nft.media[0]?.raw.search("ipfs") === 0 ? `${pinataLink}${nft.media[0]?.raw.slice(7)}` : nft.media[0]?.raw}
                            alt="no avatar"
                          />
                        : <video autoPlay muted loop className="myMedia">
                            <source
                              src={nft.media[0]?.raw.search("ipfs") === 0 ? `${pinataLink}${nft.media[0]?.raw.slice(7)}` : nft.media[0]?.raw}
                              type="video/mp4"
                            />
                            Your browser does not support HTML5 video.
                          </video>
                      }
                    </div>
                    <div className={styles.title}>{nft.title}</div>
                    <div className={styles.balance}>{nft.balance}</div>
                    <div className={styles.type}>{nft.tokenType}</div>
                  </div>
                ))}
              </div>
            )
            : <>No NFT found</>
        }
        <div>
          <button
            className={styles.saveButton}
            onClick={saveToDatabase}
            disabled={isLoading || nftCount === 0}
          >
            Save to database
          </button>
        </div>
      </main>
    </>
  )
}
